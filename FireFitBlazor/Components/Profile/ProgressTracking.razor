@using FireFitBlazor.Application
@using FireFitBlazor.Domain.Models
@using FireFitBlazor.Domain.Enums
@using FireFitBlazor.Domain.ContextInterfaces.ProgressContexts
@inject IGetUserProgressContext GetUserProgressContext
@inject IUpdateUserProgressContext UpdateUserProgressContext
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="progress-tracking">
    <div class="progress-header">
        <h4>Progress Tracking</h4>
        <RadzenButton Text="Add Measurement" Click="@OpenMeasurementDialog" ButtonStyle="ButtonStyle.Primary" />
    </div>

    <div class="progress-grid">
        <div class="progress-card">
            <h5>Weight Progress</h5>
            <RadzenChart>
                <RadzenLineSeries Data="@weightData" 
                                Title="Weight" 
                                LineType="LineType.Solid" 
                                ValueProperty="Weight" 
                                CategoryProperty="Date" />
                <RadzenCategoryAxis />
                <RadzenValueAxis />
            </RadzenChart>
        </div>

        <div class="progress-card">
            <h5>Body Fat Progress</h5>
            <RadzenChart>
                <RadzenLineSeries Data="@bodyFatData" 
                                Title="Body Fat %" 
                                LineType="LineType.Solid" 
                                ValueProperty="BodyFat" 
                                CategoryProperty="Date" />
                <RadzenCategoryAxis />
                <RadzenValueAxis />
            </RadzenChart>
        </div>

        <div class="progress-card">
            <h5>Measurements Progress</h5>
            <RadzenChart>
                <RadzenLineSeries Data="@measurementsData" 
                                Title="Chest" 
                                LineType="LineType.Solid" 
                                ValueProperty="Chest" 
                                CategoryProperty="Date" />
                <RadzenLineSeries Data="@measurementsData" 
                                Title="Waist" 
                                LineType="LineType.Solid" 
                                ValueProperty="Waist" 
                                CategoryProperty="Date" />
                <RadzenLineSeries Data="@measurementsData" 
                                Title="Hips" 
                                LineType="LineType.Solid" 
                                ValueProperty="Hips" 
                                CategoryProperty="Date" />
                <RadzenCategoryAxis />
                <RadzenValueAxis />
            </RadzenChart>
        </div>
    </div>

    <div class="progress-summary">
        <h5>Recent Measurements</h5>
        <RadzenDataGrid Data="@recentMeasurements" 
                       TItem="BodyMeasurement" 
                       AllowPaging="true" 
                       PageSize="5">
            <Columns>
                <RadzenDataGridColumn TItem="BodyMeasurement" Property="MeasurementDate" Title="Date" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="BodyMeasurement" Property="Weight" Title="Weight" FormatString="{0:N1} kg" />
                <RadzenDataGridColumn TItem="BodyMeasurement" Property="BodyFatPercentage" Title="Body Fat %" FormatString="{0:N1}%" />
                <RadzenDataGridColumn TItem="BodyMeasurement" Property="Chest" Title="Chest" FormatString="{0:N1} cm" />
                <RadzenDataGridColumn TItem="BodyMeasurement" Property="Waist" Title="Waist" FormatString="{0:N1} cm" />
                <RadzenDataGridColumn TItem="BodyMeasurement" Property="Hips" Title="Hips" FormatString="{0:N1} cm" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

<style>
    .progress-tracking {
        padding: 1rem;
    }

    .progress-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .progress-header h4 {
        margin: 0;
        color: #333;
    }

    .progress-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .progress-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .progress-card h5 {
        margin: 0 0 1rem 0;
        color: #333;
    }

    .progress-summary {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .progress-summary h5 {
        margin: 0 0 1rem 0;
        color: #333;
    }

    @@media (max-width: 768px) {
        .progress-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    [Parameter]
    public string UserId { get; set; }

    private List<BodyMeasurement> recentMeasurements = new();
    private List<WeightDataPoint> weightData = new();
    private List<BodyFatDataPoint> bodyFatData = new();
    private List<MeasurementDataPoint> measurementsData = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProgressData();
    }

    private async Task LoadProgressData()
    {
        var result = await GetUserProgressContext.GetUserProgressAsync(UserId);
        
        if (result != null && result.Measurements != null)
        {
            var progress = result;
            recentMeasurements = progress.Measurements.OrderByDescending(m => m.MeasurementDate).ToList();

            // Prepare chart data
            weightData = recentMeasurements
                .OrderBy(m => m.MeasurementDate)
                .Select(m => new WeightDataPoint { Date = m.MeasurementDate, Weight = m.Weight })
                .ToList();

            bodyFatData = recentMeasurements
                .OrderBy(m => m.MeasurementDate)
                .Select(m => new BodyFatDataPoint { Date = m.MeasurementDate, BodyFat = m.BodyFatPercentage })
                .ToList();

            measurementsData = recentMeasurements
                .OrderBy(m => m.MeasurementDate)
                .Select(m => new MeasurementDataPoint 
                { 
                    Date = m.MeasurementDate,
                    Chest = m.Chest,
                    Waist = m.Waist,
                    Hips = m.Hips
                })
                .ToList();
        }
    }

    private async Task OpenMeasurementDialog()
    {
        var result = await DialogService.OpenAsync<MeasurementDialog>("Add Measurement",
            new Dictionary<string, object> { { "UserId", UserId } },
            new DialogOptions { Width = "400px", Height = "600px" });

        if (result == true)
        {
            await LoadProgressData();
        }
    }

    private class WeightDataPoint
    {
        public DateTime Date { get; set; }
        public decimal? Weight { get; set; }
    }

    private class BodyFatDataPoint
    {
        public DateTime Date { get; set; }
        public decimal? BodyFat { get; set; }
    }

    private class MeasurementDataPoint
    {
        public DateTime? Date { get; set; }
        public decimal? Chest { get; set; }
        public decimal? Waist { get; set; }
        public decimal? Hips { get; set; }
    }
} 