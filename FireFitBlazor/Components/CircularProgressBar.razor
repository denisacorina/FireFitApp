

@* CircularProgressBar.razor *@
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="circular-progress" @ref="ProgressRef" style="@ProgressStyle">
    <svg class="progress-ring" width="@(Size)" height="@(Size)">
        <circle r="@(Size/2 - 10)"
        cx="@(Size/2)"
        cy="@(Size/2)"
        fill="none"
        stroke="#e2e2e2"
        stroke-width="@StrokeBottom" />
        <circle r="@(Size/2 - 10)"
        cx="@(Size/2)"
        cy="@(Size/2)"
        fill="none"
        stroke="@ColorSlice"
        stroke-width="@StrokeBottom"
        stroke-dasharray="@CircleCircumference"
        stroke-dashoffset="@CalculateOffset"
        style="transform: rotate(-90deg); transform-origin: 50% 50%;" />
    </svg>
    <div class="progress-text">@CurrentPercent%</div>
</div>

@code {
    [Parameter] public int StrokeBottom { get; set; } = 5;
    [Parameter] public int TargetPercent { get; set; } = 75;
    [Parameter] public string ColorSlice { get; set; } = "#EC407A";
    [Parameter] public string ColorCircle { get; set; } = "#f1f1f1";
    [Parameter] public bool Round { get; set; } = true;
    [Parameter] public int Size { get; set; } = 120;
    private string ProgressStyle => $"--percent: {TargetPercent}";
    private ElementReference ProgressRef;
    private DotNetObjectReference<CircularProgressBar> ObjectReference;
    private int CurrentPercent { get; set; } = 75;
    private double CircleCircumference => 2 * Math.PI * (Size / 2 - 10);

    private double CalculateOffset => CircleCircumference - (CircleCircumference * CurrentPercent) / 100;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ObjectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initProgressBar", ProgressRef, ObjectReference, CurrentPercent);
        }
    }

    [JSInvokable]
    public void UpdateProgress(int newPercent)
    {
        try
        {
            CurrentPercent = newPercent;
            StateHasChanged();
        }
        catch(Exception e){
            Console.WriteLine(e.Message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (ObjectReference != null)
        {
            ObjectReference.Dispose();
        }
    }
}

<style>
    .circular-progress {
        position: relative;
        display: inline-block;
    }

    .progress-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 12px;
        color: #666;
    }

    circle {
        transition: stroke-dashoffset 0.35s;
        transform-origin: 50% 50%;
    }
    .progress-ring {
        transform: rotate(-90deg);
    }

    .progress-ring__circle-bg {
        fill: none;
    }

    .progress-ring__circle {
        fill: none;
        stroke-linecap: round;
        stroke-dasharray: 326.726;
        stroke-dashoffset: calc(326.726 - (326.726 * var(--percent)) / 100);
        transition: stroke-dashoffset 1s ease-out;
    }

    .progress-value {
        position: absolute;
        font-size: 1.5rem;
        color: #333;
        font-weight: 600;
    }

    /* Optional shadow effect */
    .circular-progress::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border-radius: 50%;
        box-shadow: inset 0 0 25px 10px #f50057;
        opacity: 0.2;
    }
</style>