@page "/my-goals"
@using FireFitBlazor.Application.DTOs
@using FireFitBlazor.Application.Services
@using FireFitBlazor.Domain.Enums
@using Radzen
@using Radzen.Blazor
@using FireFitBlazor.Domain.Models
@inject IGoalService GoalService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer


<RadzenCard>
    <CardHeader>
        <h3>My Goals</h3>
    </CardHeader>
    <CardContent>
        <RadzenButton Text="Create New Goal" Click="@CreateNewGoal" ButtonStyle="ButtonStyle.Primary" />

        <RadzenDataGrid @ref="grid" Data="@goals" TItem="GoalDto" AllowPaging="true" PageSize="5" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="GoalDto" Property="Type" Title="Goal Type" />
                <RadzenDataGridColumn TItem="GoalDto" Property="TargetWeight" Title="Target Weight" FormatString="{0:N1} kg" />
                <RadzenDataGridColumn TItem="GoalDto" Property="TargetBodyFatPercentage" Title="Target Body Fat %" FormatString="{0:N1}%" />
                <RadzenDataGridColumn TItem="GoalDto" Property="TargetDate" Title="Target Date" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="GoalDto" Property="IsActive" Title="Status">
                    <Template Context="data">
                        @if (data.IsActive)
                        {
                            <RadzenBadge Text="Active" BadgeStyle="BadgeStyle.Success" />
                        }
                        else
                        {
                            <RadzenBadge Text="Completed" BadgeStyle="BadgeStyle.Info" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="GoalDto" Context="data">
                    <Template>
                        @*  <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(args => EditGoal(data))" /> *@
                        @if (data.IsActive)
                        {
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@(args => CompleteGoal(data))" />
                        }
                        else
                        {
                            <RadzenButton Icon="refresh" ButtonStyle="ButtonStyle.Info" Click="@(args => ReactivateGoal(data))" />
                        }
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => DeleteGoal(data))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </CardContent>
</RadzenCard>

<RadzenDialog></RadzenDialog>

@code {
    private RadzenDataGrid<GoalDto> grid;
    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;
    private IEnumerable<GoalDto> goals = new List<GoalDto>();

    private string? currentUserId;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadGoals();
    }

    private async Task LoadGoals()
    {
        var http = HttpClientFactory.CreateClient("ServerAPI");
        var response = await http.GetAsync("/api/customauth/me");
        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        currentUser = await response.Content.ReadFromJsonAsync<User>();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        goals = await GoalService.GetUserGoalsAsync(currentUserId);
    }

    private async Task CreateNewGoal()
    {
        var result = await DialogService.OpenAsync<GoalDialog>("Create New Goal",
            new Dictionary<string, object> { { "UserId", currentUserId }, { "CurrentUser", currentUser }, { "ExistingGoal", goals } },
            new DialogOptions() { Width = "700px", Height = "600px" });

        if (result == true)
        {
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal created successfully");
        }
    }

    private async Task EditGoal(GoalDto goal)
    {
        var result = await DialogService.OpenAsync<GoalDialog>("Edit Goal",
            new Dictionary<string, object> 
            { 
                { "UserId", currentUserId },
                { "ExistingGoal", goal }
            },
            new DialogOptions() { Width = "700px", Height = "600px" });

        if (result == true)
        {
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal updated successfully");
        }
    }

    private async Task CompleteGoal(GoalDto goal)
    {
        var result = await DialogService.Confirm("Are you sure you want to mark this goal as completed?", "Complete Goal",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == true)
        {
            await GoalService.MarkGoalAsCompletedAsync(goal.GoalId);
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal marked as completed");
        }
    }

    private async Task ReactivateGoal(GoalDto goal)
    {
        await GoalService.ReactivateGoalAsync(goal.GoalId);
        await LoadGoals();
        NotificationService.Notify(NotificationSeverity.Success, "Goal reactivated");
    }

    private async Task DeleteGoal(GoalDto goal)
    {
        var result = await DialogService.Confirm("Are you sure you want to delete this goal?", "Delete Goal",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == true)
        {
            await GoalService.DeleteGoalAsync(goal.GoalId);
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal deleted successfully");
        }
    }

    private double CalculateGoalProgress(GoalDto goal)
    {
        if (!goal.TargetDate.HasValue)
            return 0;

        var daysTotal = (goal.TargetDate.Value - goal.CreatedAt).TotalDays;
        var daysElapsed = (DateTime.Now - goal.CreatedAt).TotalDays;
        var progress = (daysElapsed / daysTotal) * 100;
        return Math.Min(Math.Max(progress, 0), 100);
    }

    private string GetGoalTarget(GoalDto goal)
    {
        return goal.Type switch
        {
            GoalType.WeightLoss => $"Lose to {goal.TargetWeight:N1} kg",
            GoalType.WeightGain => $"Gain to {goal.TargetWeight:N1} kg",
            GoalType.Maintenance => $"Maintain {goal.TargetWeight:N1} kg",
            GoalType.BodyFatReduction => $"Reduce to {goal.TargetBodyFatPercentage:N1}% body fat",
            GoalType.MuscleGain => $"Gain muscle mass",
            GoalType.Endurance => "Improve endurance",
            GoalType.Strength => "Increase strength",
            GoalType.Custom => "Custom goal",
            _ => "N/A"
        };
    }

    private string GetGoalCurrent(GoalDto goal)
    {
  
        return goal.Type switch
        {
            GoalType.WeightLoss or GoalType.WeightGain or GoalType.Maintenance => "Current weight: -- kg",
            GoalType.BodyFatReduction => "Current body fat: --%",
            GoalType.MuscleGain => "Muscle mass: -- kg",
            GoalType.Endurance => "Endurance level: --",
            GoalType.Strength => "Strength level: --",
            GoalType.Custom => "Custom progress: --",
            _ => "N/A"
        };
    }
} 