@using FireFitBlazor.Application.DTOs
@using FireFitBlazor.Application.Services
@using FireFitBlazor.Domain.Enums
@using Radzen
@using Radzen.Blazor
@inject IGoalService GoalService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenCard>
    <CardHeader>
        <h3>My Goals</h3>
    </CardHeader>
    <CardContent>
        <RadzenButton Text="Create New Goal" Click="@CreateNewGoal" ButtonStyle="ButtonStyle.Primary" />
        
        <RadzenDataGrid @ref="grid" Data="@goals" TItem="GoalDto" AllowPaging="true" PageSize="5" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="GoalDto" Property="Type" Title="Goal Type" />
                <RadzenDataGridColumn TItem="GoalDto" Property="TargetWeight" Title="Target Weight" FormatString="{0:N1} kg" />
                <RadzenDataGridColumn TItem="GoalDto" Property="TargetBodyFatPercentage" Title="Target Body Fat %" FormatString="{0:N1}%" />
                <RadzenDataGridColumn TItem="GoalDto" Property="TargetDate" Title="Target Date" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="GoalDto" Property="IsActive" Title="Status">
                    <Template Context="data">
                        @if (data.IsActive)
                        {
                            <RadzenBadge Text="Active" BadgeStyle="BadgeStyle.Success" />
                        }
                        else
                        {
                            <RadzenBadge Text="Completed" BadgeStyle="BadgeStyle.Info" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="GoalDto" Context="data">
                    <Template>
                       @*  <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(args => EditGoal(data))" /> *@
                        @if (data.IsActive)
                        {
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@(args => CompleteGoal(data))" />
                        }
                        else
                        {
                            <RadzenButton Icon="refresh" ButtonStyle="ButtonStyle.Info" Click="@(args => ReactivateGoal(data))" />
                        }
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => DeleteGoal(data))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </CardContent>
</RadzenCard>

@code {
    private RadzenDataGrid<GoalDto> grid;
    private IEnumerable<GoalDto> goals = new List<GoalDto>();
    private string userId; // Replace with actual user ID

    protected override async Task OnInitializedAsync()
    {
        await LoadGoals();
    }

    private async Task LoadGoals()
    {
        goals = await GoalService.GetUserGoalsAsync(userId);
    }

    private async Task CreateNewGoal()
    {
        var result = await DialogService.OpenAsync<CreateGoalDialog>("Create New Goal",
            new Dictionary<string, object> { { "UserId", userId } },
            new DialogOptions() { Width = "700px", Height = "600px" });

        if (result == true)
        {
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal created successfully");
        }
    }

    // private async Task EditGoal(GoalDto goal)
    // {
    //     var result = await DialogService.OpenAsync<EditGoalDialog>("Edit Goal",
    //         new Dictionary<string, object> { { "Goal", goal } },
    //         new DialogOptions() { Width = "700px", Height = "600px" });

    //     if (result == true)
    //     {
    //         await LoadGoals();
    //         NotificationService.Notify(NotificationSeverity.Success, "Goal updated successfully");
    //     }
    // }

    private async Task CompleteGoal(GoalDto goal)
    {
        var result = await DialogService.Confirm("Are you sure you want to mark this goal as completed?", "Complete Goal",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == true)
        {
            await GoalService.MarkGoalAsCompletedAsync(goal.GoalId);
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal marked as completed");
        }
    }

    private async Task ReactivateGoal(GoalDto goal)
    {
        await GoalService.ReactivateGoalAsync(goal.GoalId);
        await LoadGoals();
        NotificationService.Notify(NotificationSeverity.Success, "Goal reactivated");
    }

    private async Task DeleteGoal(GoalDto goal)
    {
        var result = await DialogService.Confirm("Are you sure you want to delete this goal?", "Delete Goal",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == true)
        {
            await GoalService.DeleteGoalAsync(goal.GoalId);
            await LoadGoals();
            NotificationService.Notify(NotificationSeverity.Success, "Goal deleted successfully");
        }
    }
} 