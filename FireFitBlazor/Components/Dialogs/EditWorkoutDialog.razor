@using Domain.Models
@using Application.Services
@inject IWorkoutService WorkoutService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using static FireFitBlazor.Domain.Enums.FoodTrackingEnums
@using FireFitBlazor.Application.DTOs;
@rendermode InteractiveServer

<RadzenStack Gap="1rem">
    <RadzenTemplateForm Data="@workout" Submit="@FormSubmit" TItem="WorkoutSessionDto">
        <RadzenStack Gap="1rem">
            <RadzenFormField Text="Workout Type" Variant="Variant.Filled">
                <RadzenDropDown Data="@WorkoutTypeOptions"
                                TextProperty="Text"
                                ValueProperty="Value"
                                @bind-Value="workout.WorkoutType"
                                TValue="WorkoutType"
                                Name="WorkoutType"
                                Class="w-100" />
            </RadzenFormField>

            <RadzenFormField Text="Start Time" Variant="Variant.Filled">
                <RadzenDatePicker @bind-Value="@workout.StartTime"
                                  Class="w-100"
                                  Name="Date" />
            </RadzenFormField>

            <RadzenFormField Text="End Time" Variant="Variant.Filled">
                <RadzenDatePicker @bind-Value="@workout.EndTime"
                                  Class="w-100"
                                  Name="Date" />
            </RadzenFormField>

            <RadzenFormField Text="Duration (minutes)" Variant="Variant.Filled">
                <InputNumber @bind-Value="workout.DurationMinutes"
                             class="rz-input w-100"
                             min="1"
                             style="padding: 0.5rem; height: 60px;" />

            </RadzenFormField>
            <RadzenFormField Text="Calories Burned" Variant="Variant.Filled">
                <InputNumber @bind-Value="workout.CaloriesBurned"
                             class="rz-input w-100"
                             min="1"
                             style="padding: 0.5rem; height: 60px;" />
            </RadzenFormField>



            <RadzenFormField Text="Intensity Level" Variant="Variant.Filled">
                <InputNumber @bind-Value="workout.IntensityLevel"
                             class="rz-input w-100"
                             min="1"
                             style="padding: 0.5rem; height: 60px;" />
            </RadzenFormField>

            <RadzenFormField Text="Notes" Variant="Variant.Filled">
                <RadzenTextArea @bind-Value="@workout.Notes"
                                Class="w-100"
                                Name="Notes"
                                Rows="3" />
            </RadzenFormField>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
                <RadzenButton ButtonType="ButtonType.Submit"
                              Text="Save"
                              ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Text="Cancel"
                              ButtonStyle="ButtonStyle.Light"
                              Click="@Cancel" />
            </RadzenStack>
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenStack>

@code {
    [Parameter]
    public WorkoutSessionDto workout { get; set; }

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;

    private string? currentUserId;
    private User? currentUser;


    private IEnumerable<object> WorkoutTypeOptions =>
       Enum.GetValues<WorkoutType>()
           .Cast<WorkoutType>()
           .Where(w => w != WorkoutType.None)
           .Select(w => new { Text = w.ToString(), Value = w });


    protected override async Task OnInitializedAsync()
    {

        if (workout != null)
        {
            workout = new WorkoutSessionDto
                {
                    SessionId = workout.SessionId,
                    UserId = workout.UserId,
                    WorkoutType = workout.WorkoutType,
                    StartTime = workout.StartTime,
                    EndTime = workout.EndTime,
                    DurationMinutes = workout.DurationMinutes,
                    CaloriesBurned = workout.CaloriesBurned,
                    IntensityLevel = workout.IntensityLevel,
                    Notes = workout.Notes
                };
        }
    }

    private async Task FormSubmit()
    {
        try
        {
            var updatedWorkout = new WorkoutSessionDto
                {
                    SessionId = workout.SessionId,
                    UserId = currentUserId ?? workout.UserId,
                    WorkoutType = workout.WorkoutType,
                    StartTime = workout.StartTime,
                    EndTime = workout.EndTime,
                    DurationMinutes = workout.DurationMinutes,
                    CaloriesBurned = workout.CaloriesBurned,
                    IntensityLevel = workout.IntensityLevel,
                    Notes = workout.Notes
                };

            await WorkoutService.UpdateWorkout(updatedWorkout);
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update workout: " + ex.Message);
        }
    }


    private void Cancel()
    {
        DialogService.Close();
    }
} 