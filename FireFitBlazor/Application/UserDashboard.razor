@page "/dashboard"
@using FireFitBlazor.Components
@using Radzen;
@using Radzen.Blazor;
@using FireFitBlazor.Domain.Models
@using FireFitBlazor.Application.Services
@using FireFitBlazor.Domain.ValueObjects
@using FireFitBlazor.Domain.Enums
@inject IFoodLogService FoodLogService
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms;
@rendermode RenderMode.InteractiveServer

<div class="mobile-container">
    <!-- Top Navigation -->
    <div class="top-nav">
        <span></span>
        <span><b>Today</b></span>
        <span></span>
    </div>

    <!-- Date Selection -->
  @*   <div class="date-section">
        <div class="today-label">@selectedDayLabel</div>
        <div class="days-scroll">
            @foreach (var day in days)
            {
                // Create the class dynamically
                var dayClass = day.IsActive ? "day-item active" : "day-item";
                var dayNumberClass = day.IsActive ? "day-number active-number" : "day-number";

                <RadzenButton class="@dayClass"
                              Text="@day.Name"
                              Click="@(() => SelectDay(day))"
                              Style="margin-bottom: 10px;">
                  
                </RadzenButton>
            }
        </div>

        <p>@selectedDayLabel</p>
    </div> *@
   
    <!-- Summary Card -->
    <div class="summary-card">
        <div class="summary-header">
            <div class="title-section">
                <span>Summary</span>
                <span></span>
            </div>
            <span></span>
        </div>
        <div class="summary-content">
            <div class="stats-section">
                <div class="stats-list">
                    <div class="stat-row">
                        <span class="stat-label">Consumed</span>
                        <span class="stat-value">@caloriesConsumed</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Left</span>
                        <span class="stat-value light">@RemainingCalories</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Total</span>
                        <span class="stat-value">@totalCaloriesGoal</span>
                    </div>
                </div>
            </div>

            <!-- Progress bar moved before Macros section -->
            <div class="progress-b">
                <div class="progress-b">
                    <div class="container">
                        <CircularProgressBar StrokeBottom="5"
                                             Size="120"
                                             TargetPercent="@((int)((double)caloriesConsumed / totalCaloriesGoal * 100))"
                                             ColorSlice="#DC7C05"
                                             ColorCircle="#f1f1f1"
                                             Round="true" />
                    </div>
                </div>
            </div>
        </div>

        <div class="macros-section">
            <div class="macro-grid">
                <div class="macro-item">
                    <span class="macro-label">Protein</span>
                    <CircularProgressBar Size="60"
                                         StrokeBottom="3"
                                         TargetPercent="@macros[0].GetProgress()"
                                         ColorSlice="#4CAF50"
                                         ColorCircle="#FFE6EC"
                                         Round="true" />
                    <span class="macro-values">@macros[0].Current/@macros[0].Goal</span>
                </div>
                <div class="macro-item">
                    <span class="macro-label">Fats</span>
                    <CircularProgressBar Size="60"
                                         StrokeBottom="3"
                                         TargetPercent="@macros[1].GetProgress()"
                                         ColorSlice="#d52f57"
                                         ColorCircle="#FFE6EC"
                                         Round="true" />
                    <span class="macro-values">@macros[1].Current/@macros[1].Goal</span>
                </div>
                <div class="macro-item">
                    <span class="macro-label">Carbs</span>
                    <CircularProgressBar Size="60"
                                         StrokeBottom="3"
                                         TargetPercent="@macros[2].GetProgress()"
                                         ColorSlice="#42A5F5"
                                         ColorCircle="#FFE6EC"
                                         Round="true" />
                    <span class="macro-values">@macros[2].Current/@macros[2].Goal</span>
                </div>
            </div>
        </div>

        <!-- Meals List -->
        <div class="meals-list">
            @foreach (var meal in meals)
            {
                var foodsForMeal = todaysFoodLogs.Where(f => f.MealType.ToString() == meal.Name).ToList();
                <div class="meal-item" @onclick="() => SelectMeal(meal)">
                    <div class="meal-icon">@meal.Icon</div>
                    <div class="meal-details">
                        <span class="meal-name">@meal.Name</span>
                        <span class="meal-calories">@meal.Calories kcal</span>
                    </div>
                    @if (foodsForMeal.Any())
                    {
                        <div class="meal-foods">
                            @foreach (var food in foodsForMeal)
                            {
                                <div class="food-item">
                                    <span class="food-name">@food.FoodName</span>
                                    <span class="food-calories">@((int)food.NutritionalInfo.Calories) kcal</span>
                                </div>
                            }
                        </div>
                    }
                    <i class="fas fa-chevron-right"></i>
                </div>
            }
        </div>

        
    </div>

</div>
<FireFitBlazor.Components.Layout.BottomNav></FireFitBlazor.Components.Layout.BottomNav>

@code {
    private string currentMonth = DateTime.Now.ToString("MMMM");
    private int caloriesConsumed = 0;
    private int totalCaloriesGoal = 1570;
    private string selectedDayLabel = "Today"; 
    private DateTime selectedDate = DateTime.Now;
    private string userId;
    private List<FoodLog> todaysFoodLogs = new();
    private List<DayModel> days = new List<DayModel>();
    [Inject]
    public HttpClient Http { get; set; } = default!;
    private string? currentUserId;
    private User? currentUser;

    // Calculated property for remaining calories
    private int RemainingCalories => totalCaloriesGoal - caloriesConsumed;

    // Calculated property for progress percentage
    private int CalculateProgress => (int)((double)caloriesConsumed / totalCaloriesGoal * 100);

    private List<MacroModel> macros = new List<MacroModel>
    {
        new MacroModel
        {
            Name = "Protein",
            Current = 0,
            Goal = 70,
            ProgressClass = "protein-progress"
        },
        new MacroModel
        {
            Name = "Carbs",
            Current = 0,
            Goal = 158,
            ProgressClass = "carbs-progress"
        },
        new MacroModel
        {
            Name = "Fats",
            Current = 0,
            Goal = 55,
            ProgressClass = "fats-progress"
        }
    };

    private List<MealModel> meals = new List<MealModel>
    {
        new MealModel
        {
            Name = "Breakfast",
            Calories = 0,
            Icon = "🥗"
        },
        new MealModel
        {
            Name = "Lunch",
            Calories = 0,
            Icon = "🍜"
        },
        new MealModel
        {
            Name = "Dinner",
            Calories = 0,
            Icon = "🍲"
        }
    };

    private int _progress;
    private System.Timers.Timer _timer;

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;


    public void Dispose()
    {
        _timer?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("ServerAPI");
        var response = await http.GetAsync("/api/customauth/me");
        if (!response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        currentUser = await response.Content.ReadFromJsonAsync<User>();
        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

       
        
        // // Log a sample breakfast item
        // var sampleFood = new FoodLog
        // {
        //         UserId = currentUser.UserId,
        //     FoodName = "Oatmeal with Berries",
        //     NutritionalInfo = new NutritionalInfo(350, 12, 58, 8),
        //         MealType = FoodTrackingEnums.MealType.Breakfast
        // };
        // await FoodLogService.LogFoodAsync(sampleFood);
        
        await LoadTodaysFoodLogs();
        await UpdateMacros();

        _timer = new System.Timers.Timer(20);
        _timer.Elapsed += (sender, e) =>
        {
            if (_progress < CalculateProgress)
            {
                _progress++;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                _timer.Stop();
            }
        };
        _timer.Start();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged(); // Trigger the update on first render to ensure the UI is consistent
        }
    }

    // private void SelectDay(DayModel day)
    // {
    //     // Reset active state for all days
    //     days.ForEach(d => d.IsActive = false);

    //     // Mark the selected day as active
    //     day.IsActive = true;

    //     // Update the label based on the selected day
    //     UpdateSelectedDayLabel(day);

    //     // Trigger UI update
    //     StateHasChanged();

    //     // Load data for the selected day
    //     LoadDayData(day);
    // }
    // private void UpdateSelectedDayLabel(DayModel day)
    // {
    //     var today = DateTime.Now;
    //     var selectedDayDate = GetDateFromDay(day);

    //     if (selectedDayDate.Date == today.Date)
    //     {
    //         selectedDayLabel = "Today";
    //     }
    //     else if (selectedDayDate.Date == today.AddDays(1).Date)
    //     {
    //         selectedDayLabel = "Tomorrow";
    //     }
    //     else if (selectedDayDate.Date == today.AddDays(-1).Date)
    //     {
    //         selectedDayLabel = "Yesterday";
    //     }
    //     else
    //     {
    //         // Format the date as "Monday, 5 May" for other days
    //         selectedDayLabel = selectedDayDate.ToString("dddd, d MMMM");
    //     }
    //}

    // private DateTime GetDateFromDay(DayModel day)
    // {
    //     // Find the date that corresponds to this day
    //     var today = DateTime.Now;
    //     var startDate = today.AddDays(-3);
    //     var dayIndex = days.IndexOf(day);
    //     return startDate.AddDays(dayIndex);
    // }

    // // You can define this method to load data for the selected day.
    // private void LoadDayData(DayModel day)
    // {
    //     // Example: Load meals or statistics related to the selected day
    //     Console.WriteLine($"Loading data for: {day.Name} {day.Number}");

    //     // Add your data fetching logic here, such as:
    //     // - Fetch meals for the day
    //     // - Load statistics
    //     // - Update other UI elements related to the selected day
    // }

    private async Task LoadTodaysFoodLogs()
    {
        if (currentUser != null)
        {
            todaysFoodLogs = await FoodLogService.GetLogsForDate(currentUser.UserId, DateTime.Today);
            caloriesConsumed = todaysFoodLogs.Sum(f => (int)f.NutritionalInfo.Calories);

            foreach (var meal in meals)
            {
                meal.Calories = todaysFoodLogs
                    .Where(f => f.MealType.ToString() == meal.Name)
                    .Sum(f => (int)f.NutritionalInfo.Calories);
            }
        }
    }

    private async Task UpdateMacros()
    {
        var totalProtein = todaysFoodLogs.Sum(f => f.NutritionalInfo.Proteins);
        var totalCarbs = todaysFoodLogs.Sum(f => f.NutritionalInfo.Carbs);
        var totalFats = todaysFoodLogs.Sum(f => f.NutritionalInfo.Fats);

        macros[0].Current = (int)totalProtein;
        macros[1].Current = (int)totalCarbs;
        macros[2].Current = (int)totalFats;
    }

    private void NavigateToAddFood(string mealType)
    {
        Navigation.NavigateTo($"/add-food?mealType={mealType}");
    }

    private void SelectMeal(MealModel meal)
    {
        Navigation.NavigateTo($"/add-food?mealType={meal.Name}");
    }

    public class DayModel
    {
        public string Name { get; set; }
        public int Number { get; set; }
        public bool IsActive { get; set; }
        public bool IsToday { get; set; }
    }

    public class MacroModel
    {
        public string Name { get; set; }
        public int Current { get; set; }
        public int Goal { get; set; }
        public string ProgressClass { get; set; }

        public int GetProgress() => (int)((double)Current / Goal * 100);
    }

    public class MealModel
    {
        public string Name { get; set; }
        public int Calories { get; set; }
        public string Icon { get; set; }
    }
}

<style>
    .date-section {
        padding: 1rem;
        background: white;
        margin-bottom: 1rem;
    }

    .today-label {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 1rem;
        color: #333;
    }

    .days-scroll {
        display: flex;
        overflow-x: auto;
        gap: 1rem;
        padding: 0.5rem 0;
        -ms-overflow-style: none; /* Hide scrollbar IE and Edge */
        scrollbar-width: none; /* Hide scrollbar Firefox */
    }

        .days-scroll::-webkit-scrollbar {
            display: none; /* Hide scrollbar Chrome, Safari, Opera */
        }

    .day-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 45px;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .day-name {
        font-size: 0.8rem;
        color: #666;
        text-transform: uppercase;
        margin-bottom: 0.3rem;
    }

    .day-number {
        font-size: 1.1rem;
        font-weight: 500;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
    }

    .day-item.active {
        background-color: #FF5722;
    }

        .day-item.active .day-name,
        .day-item.active .day-number {
            color: white;
        }

    .active-number {
        background-color: #FF4500;
        color: white;
    }

    /* Today's special styling */
    .day-item.today {
        background-color: #FF5722;
    }

        .day-item.today .day-name,
        .day-item.today .day-number {
            color: white;
        }

    .progress-b {
        margin-left: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .summary-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
    }

    .stats-section {
        flex: 1;
    }


  .macros-section {
        margin-top: 2rem;
    }

    .macro-grid {
        display: flex;
        justify-content: space-between;
        gap: 0.5rem;
        width: 100%;
    }

    .macro-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        flex: 1;
    }

    .macro-label {
        margin-top: 0.5rem;
        color: #666;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .macro-values {
        margin-top: 0.25rem;
        color: #666;
        font-size: 0.8rem;
    }


    /* Media query for mobile devices */
    @@media (max-width: 768px) {
        .macro-grid {
            gap: 0.25rem;
        }

        .macro-item {
            padding: 0.5rem;
        }

        .macro-label {
            font-size: 0.8rem;
        }

        .macro-values {
            font-size: 0.7rem;
        }
    }

    /* Ensure the summary card has proper padding */
    .summary-card {
        padding: 1.5rem 1rem;
        background: white;
        border-radius: 1rem;
        margin: 1rem;
    }

    .meal-foods {
        margin-top: 8px;
        font-size: 0.9em;
    }

    .food-item {
        display: flex;
        justify-content: space-between;
        padding: 4px 0;
        color: #666;
    }

    .food-name {
        font-weight: 500;
    }

    .food-calories {
        color: #888;
    }

    .meal-item {
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .meal-item:hover {
        background-color: #f5f5f5;
    }

    .meals-list {
        padding: 0.5rem;
    }

    .meal-item {
        filter: drop-shadow(1px 1px 10px #f1f1f1);
        background-color: white;
        display: flex;
        align-items: flex-start;
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 0.75rem;
        cursor: pointer;
        transition: background-color 0.2s;
        position: relative;
    }

    .meal-item:active {
        background-color: #f5f5f5;
    }

    .meal-icon {
        font-size: 1.25rem;
        margin-right: 0.75rem;
        padding: 0.5rem;
        background: #f8f8f8;
        border-radius: 8px;
        min-width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .meal-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .meal-name {
        font-weight: 600;
        font-size: 1rem;
        color: #333;
    }

    .meal-calories {
        color: #666;
        font-size: 0.875rem;
    }

    .meal-foods {
        margin-top: 0.5rem;
        width: 100%;
    }

    .food-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem;
        background: #f8f8f8;
        border-radius: 8px;
        margin-bottom: 0.25rem;
    }

    .food-name {
        font-weight: 500;
        font-size: 0.875rem;
        color: #444;
    }

    .food-calories {
        color: #666;
        font-size: 0.875rem;
    }

    .fa-chevron-right {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #ccc;
        font-size: 0.875rem;
    }

    /* Mobile-specific adjustments */
    @@media (max-width: 768px) {
        .meals-list {
            padding: 0.25rem;
        }

        .meal-item {
            flex-direction: column;
            align-items: flex-start;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
        }

        .meal-icon {
            margin-right: 0;
            margin-bottom: 0.5rem;
            align-self: flex-start;
        }

        .meal-details {
            width: 100%;
            gap: 0.1rem;
            margin-bottom: 0.5rem;
        }

        .meal-foods {
            width: 100%;
            background: #f5f5f5;
            border-radius: 8px;
            padding: 0.5rem 0.75rem;
            margin-top: 0.5rem;
        }

        .food-item {
            padding: 0.375rem 0;
            background: none;
            border-bottom: 1px solid #ececec;
            margin-bottom: 0;
        }
        .food-item:last-child {
            border-bottom: none;
        }

        .fa-chevron-right {
            position: static;
            margin-top: 0.5rem;
            align-self: flex-end;
            transform: none;
        }
    }
</style>