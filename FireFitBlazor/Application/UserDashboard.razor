@page "/dashboard"
@using Radzen.Blazor
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms;
@rendermode RenderMode.InteractiveServer

@using BlazorBootstrap

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>Today</h1>
    </div>

    <div class="dashboard-content">
        <div class="calories-summary">


            <div class="calories-circle">
                <div class="circle-wrapper">
                    <svg viewBox="0 0 36 36" class="circular-chart">
                        <path class="circle-bg"
                              d="M18 2.0845
                                 a 15.9155 15.9155 0 0 1 0 31.831
                                 a 15.9155 15.9155 0 0 1 0 -31.831" />
                        <path class="circle"
                              stroke-dasharray="@CalculateProgress, 100"
                              d="M18 2.0845
                                 a 15.9155 15.9155 0 0 1 0 31.831
                                 a 15.9155 15.9155 0 0 1 0 -31.831" />
                    </svg>
                    <div class="circle-text">
                        <h2>@RemainingCalories</h2>
                        <p>remaining</p>
                    </div>
                </div>
            </div>

            <div class="calories-details">
                <div class="calories-item">
                    <span class="label">Goal</span>
                    <span class="value">@baseGoal</span>
                </div>
                <div class="calories-item">
                    <span class="label">Food</span>
                    <span class="value">-@foodCalories</span>
                </div>
                <div class="calories-item">
                    <span class="label">Exercise</span>
                    <span class="value">+@exerciseCalories</span>
                </div>
            </div>
        </div>

        <!-- Weight Change Insights -->


        <div class="calories-summary">
            <div class="container-fluid overflow-x-auto">
                <LineChart @ref="lineChart" Width="350" Height="250" />
            </div>


        </div>
    </div>
</div>

@code {
    private int baseGoal = 1570;
    private int foodCalories = 1200;
    private int exerciseCalories = 300;

    private int RemainingCalories => baseGoal - foodCalories + exerciseCalories;
    private int CalculateProgress => (int)(((double)(baseGoal - RemainingCalories) / baseGoal) * 100);

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected override void OnInitialized()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        var weights = new List<double?> { 96.5, 100.0, 95.6, 95.3, 95.1, 94.9 };
        var dates = new List<string> { "01 Jan", "02 Jan", "03 Jan", "04 Jan", "05 Jan", "06 Jan" };

        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset
            {
                Label = "Weight Change",
                Data = weights,
                BackgroundColor = colors[0],
                BorderColor = colors[0],
                BorderWidth = 2,
                HoverBorderWidth = 4,
                // PointBackgroundColor = colors[0],
                // PointRadius = 0, // hide points
                // PointHoverRadius = 4,
            };
        datasets.Add(dataset1);


        chartData = new ChartData { Labels = dates, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Date", Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Wieght (kg)", Display = true };

        lineChartOptions.Plugins.Title!.Text = "Weight Change Over Time";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}
<style>
    .dashboard-container {
        max-width: 600px;
        margin: auto;
        padding: 1rem;
    }

    .dashboard-header h1 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
    }

    .dashboard-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .calories-summary {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        padding: 1rem;
        gap: 1rem;
    }

    .calories-circle {
        width: 120px;
        height: 120px;
        position: relative;
        flex-shrink: 0;
        margin: auto;
    }

    .circle-wrapper {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .circular-chart {
        width: 100%;
        height: 100%;
        transform: rotate(-90deg);
    }

    .circle-bg {
        fill: none;
        stroke: #eee;
        stroke-width: 3.8;
    }

    .circle {
        fill: none;
        stroke: #DC7C05;
        stroke-width: 3.8;
        stroke-linecap: round;
        transition: stroke-dasharray 0.5s ease;
    }

    .circle-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }

        .circle-text h2 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .circle-text p {
            margin: 0;
            font-size: 0.85rem;
            color: #6c757d;
        }

    .calories-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .calories-item {
        display: flex;
        justify-content: space-between;
    }

        .calories-item .label {
            font-size: 0.9rem;
            color: #6c757d;
        }

        .calories-item .value {
            font-weight: 600;
            color: #2c3e50;
        }

    .insights-section {
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        padding: 1rem;
    }

        .insights-section h3 {
            font-size: 1.1rem;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

    .weight-chart {
        background: #f8f9fa;
        border-radius: 0.75rem;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #6c757d;
    }

    /* Mobile responsiveness */
    @@media (max-width: 600px) {
        .calories-summary {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .calories-details {
            align-items: center;
            width: 100%;
        }

        .calories-item {
            width: 100%;
            justify-content: space-between;
            max-width: 300px;
        }
    }
</style>

@* @page "/dashboard"
@using FireFitBlazor.Components
@using FireFitBlazor.Domain.ContextInterfaces
@using Radzen;
@using Radzen.Blazor;
@using FireFitBlazor.Domain.Models
@using FireFitBlazor.Application.Services
@using FireFitBlazor.Domain.ValueObjects
@using FireFitBlazor.Domain.Enums
@inject IFoodLogService FoodLogService
@inject IUserPreferencesContext UserPreferencesContext
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms;
@rendermode RenderMode.InteractiveServer

<div class="mobile-container">
    <!-- Top Navigation -->
    <div class="top-nav">
        <button class="nav-button" @onclick="() => NavigateDate(-1)">
            <RadzenIcon Icon="chevron_left" />
        </button>
        <div class="date-display">
            <h2>@selectedDate.ToString("dddd")</h2>
            <p>@selectedDate.ToString("MMMM d, yyyy")</p>
        </div>
        <button class="nav-button" @onclick="() => NavigateDate(1)">
            <RadzenIcon Icon="chevron_right" />
        </button>
    </div>

    <!-- Summary Card -->
    <div class="summary-card">
        <div class="summary-header">
            <div class="title-section">
                <span>Daily Summary</span>
            </div>
        </div>

        <div class="summary-content">
            <div class="stats-section">
                <div class="stats-list">
                    <div class="stat-row">
                        <span class="stat-label">Consumed</span>
                        <span class="stat-value">@caloriesConsumed</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Left</span>
                        <span class="stat-value light">@RemainingCalories</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Goal</span>
                        <span class="stat-value">@totalCaloriesGoal</span>
                    </div>
                </div>
            </div>

            <div class="progress-section">
                <RadzenProgressBar Value="@((double)caloriesConsumed / totalCaloriesGoal * 100)"
                ShowValue="true"
                Unit="%"
                Style="height: 8px;"
                class="custom-progress" />
            </div>
        </div>

        <div class="macros-section">
            <h3 class="section-title">Macronutrients</h3>
            <div class="macro-grid">
                <div class="macro-item">
                    <span class="macro-label">Protein</span>
                    <RadzenProgressBar Value="@(macros[0].GetProgress())"
                    ShowValue="true"
                    Unit="%"
                    Style="height: 6px;"
                    class="protein-progress" />
                    <span class="macro-values">@macros[0].Current/@macros[0].Goal g</span>
                </div>
                <div class="macro-item">
                    <span class="macro-label">Fats</span>
                    <RadzenProgressBar Value="@(macros[1].GetProgress())"
                    ShowValue="true"
                    Unit="%"
                    Style="height: 6px;"
                    class="fats-progress" />
                    <span class="macro-values">@macros[1].Current/@macros[1].Goal g</span>
                </div>
                <div class="macro-item">
                    <span class="macro-label">Carbs</span>
                    <RadzenProgressBar Value="@(macros[2].GetProgress())"
                    ShowValue="true"
                    Unit="%"
                    Style="height: 6px;"
                    class="carbs-progress" />
                    <span class="macro-values">@macros[2].Current/@macros[2].Goal g</span>
                </div>
            </div>
        </div>

        <!-- Nutrition Insights -->
        <div class="insights-section">
            <h3 class="section-title">Nutrition Insights</h3>
            <div class="insights-grid">
                <div class="insight-card">
                    <div class="insight-header">
                        <span class="insight-title">Meal Distribution</span>
                    </div>
                    <div class="insight-content">
                        @foreach (var meal in mealDistribution)
                        {
                            <div class="meal-distribution-item">
                                <span class="meal-name">@meal.Key</span>
                                <div class="meal-progress">
                                    <RadzenProgressBar Value="@(meal.Value * 100 / caloriesConsumed)"
                                    ShowValue="true"
                                    Unit="%"
                                    Style="height: 4px;"
                                    class="meal-progress-bar" />
                                </div>
                                <span class="meal-calories">@meal.Value cal</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Meals List -->
        <div class="meals-section">
            <h3 class="section-title">Meals</h3>
            <div class="meals-list">
                @foreach (var meal in meals)
                {
                    var foodsForMeal = todaysFoodLogs.Where(f => f.MealType.ToString() == meal.Name).ToList();
                    <div class="meal-item" @onclick="() => SelectMeal(meal)">
                        <div class="meal-icon">@meal.Icon</div>
                        <div class="meal-details">
                            <span class="meal-name">@meal.Name</span>
                            <span class="meal-calories">@meal.Calories kcal</span>
                        </div>
                        @if (foodsForMeal.Any())
                        {
                            <div class="meal-foods">
                                @foreach (var food in foodsForMeal)
                                {
                                    <div class="food-item">
                                        <span class="food-name">@food.FoodName</span>
                                        <span class="food-calories">@((int)food.NutritionalInfo.Calories) kcal</span>
                                    </div>
                                }
                            </div>
                        }
                        <RadzenIcon Icon="chevron_right" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<FireFitBlazor.Components.Layout.BottomNav></FireFitBlazor.Components.Layout.BottomNav>

@code {
    private string currentMonth = DateTime.Now.ToString("MMMM");
    private int caloriesConsumed = 0;
    private int totalCaloriesGoal = 1570;
    private string selectedDayLabel = "Today"; 
    private DateTime selectedDate = DateTime.Now;

    private List<FoodLog> todaysFoodLogs = new();
    private List<DayModel> days = new List<DayModel>();
    [Inject]
    public HttpClient Http { get; set; } = default!;
    private string? currentUserId;
    private User? currentUser;

    // Calculated property for remaining calories
    private int RemainingCalories => totalCaloriesGoal - caloriesConsumed;

    // Calculated property for progress percentage
    private int CalculateProgress => (int)((double)caloriesConsumed / totalCaloriesGoal * 100);

    private List<MacroModel> macros = new List<MacroModel>
    {
        new MacroModel
        {
            Name = "Protein",
            Current = 0,
            Goal = 70,
            ProgressClass = "protein-progress"
        },
        new MacroModel
        {
            Name = "Carbs",
            Current = 0,
            Goal = 158,
            ProgressClass = "carbs-progress"
        },
        new MacroModel
        {
            Name = "Fats",
            Current = 0,
            Goal = 55,
            ProgressClass = "fats-progress"
        }
    };

    private List<MealModel> meals = new List<MealModel>
    {
        new MealModel
        {
            Name = "Breakfast",
            Calories = 0,
            Icon = "🥗"
        },
        new MealModel
        {
            Name = "Lunch",
            Calories = 0,
            Icon = "🍜"
        },
        new MealModel
        {
            Name = "Dinner",
            Calories = 0,
            Icon = "🍲"
        }
    };

    private int _progress;
    private System.Timers.Timer _timer;

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;

    private Dictionary<string, int> mealDistribution = new();

    public void Dispose()
    {
        _timer?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("ServerAPI");
        var response = await http.GetAsync("/api/customauth/me");
        if (!response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        currentUser = await response.Content.ReadFromJsonAsync<User>();
        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        // var userPreferences = UserPreferencesContext.GetUserPreferences(currentUser.UserId);
        //totalCaloriesGoal = userPreferences.Result.DailyCalorieGoal;
        await LoadTodaysFoodLogs();
        await UpdateMacros();
        await UpdateMealDistribution();

        _timer = new System.Timers.Timer(20);
        _timer.Elapsed += (sender, e) =>
        {
            if (_progress < CalculateProgress)
            {
                _progress++;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                _timer.Stop();
            }
        };
        _timer.Start();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged(); 
        }
    }

    private async Task LoadTodaysFoodLogs()
    {
        if (currentUser != null)
        {
            todaysFoodLogs = await FoodLogService.GetLogsForDate(currentUser.UserId, DateTime.Today);
            caloriesConsumed = todaysFoodLogs.Sum(f => (int)f.NutritionalInfo.Calories);

            foreach (var meal in meals)
            {
                meal.Calories = todaysFoodLogs
                    .Where(f => f.MealType.ToString() == meal.Name)
                    .Sum(f => (int)f.NutritionalInfo.Calories);
            }
        }
    }

    private async Task UpdateMacros()
    {
        var totalProtein = todaysFoodLogs.Sum(f => f.NutritionalInfo.Proteins);
        var totalCarbs = todaysFoodLogs.Sum(f => f.NutritionalInfo.Carbs);
        var totalFats = todaysFoodLogs.Sum(f => f.NutritionalInfo.Fats);

        macros[0].Current = (int)totalProtein;
        macros[1].Current = (int)totalCarbs;
        macros[2].Current = (int)totalFats;
    }

    private void NavigateToAddFood(string mealType)
    {
        Navigation.NavigateTo($"/add-food?mealType={mealType}");
    }

    private void SelectMeal(MealModel meal)
    {
        Navigation.NavigateTo($"/add-food?mealType={meal.Name}");
    }

    private async Task NavigateDate(int days)
    {
        selectedDate = selectedDate.AddDays(days);
        await LoadTodaysFoodLogs();
        await UpdateMacros();
        await UpdateMealDistribution();
    }

    private async Task UpdateMealDistribution()
    {
        if (currentUser != null)
        {
            var logs = await FoodLogService.GetLogsForDate(currentUser.UserId, selectedDate);
            mealDistribution = logs
                .GroupBy(f => f.MealType.ToString())
                .ToDictionary(
                    g => g.Key,
                    g => g.Sum(f => (int)f.NutritionalInfo.Calories)
                );
        }
    }

    public class DayModel
    {
        public string Name { get; set; }
        public int Number { get; set; }
        public bool IsActive { get; set; }
        public bool IsToday { get; set; }
    }

    public class MacroModel
    {
        public string Name { get; set; }
        public int Current { get; set; }
        public int Goal { get; set; }
        public string ProgressClass { get; set; }

        public int GetProgress() => (int)((double)Current / Goal * 100);
    }

    public class MealModel
    {
        public string Name { get; set; }
        public int Calories { get; set; }
        public string Icon { get; set; }
    }
}

<style>
    .mobile-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 1rem;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .top-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
        margin-bottom: 1rem;
    }

    .nav-button {
        background: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: all 0.2s ease;
    }

    .nav-button:hover {
        background: #f8f9fa;
        transform: scale(1.05);
    }

    .date-display {
        text-align: center;
    }

    .date-display h2 {
        margin: 0;
        font-size: 1.25rem;
        color: #2c3e50;
        font-weight: 600;
    }

    .date-display p {
        margin: 0;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .summary-card {
        background: white;
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    }

    .summary-header {
        margin-bottom: 1.5rem;
    }

    .title-section span {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .stats-section {
        background: #f8f9fa;
        border-radius: 1rem;
        padding: 1.25rem;
        margin-bottom: 1rem;
    }

    .stats-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .stat-value {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .stat-value.light {
        color: #6c757d;
    }

    .progress-section {
        margin-top: 1rem;
    }

    .custom-progress {
        --rz-progress-bar-background: #e9ecef;
        --rz-progress-bar-color: #DC7C05;
    }

    .macros-section {
        margin-top: 2rem;
    }

    .section-title {
        font-size: 1.1rem;
        color: #2c3e50;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .macro-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
    }

    .macro-item {
        background: #f8f9fa;
        border-radius: 0.75rem;
        padding: 1rem;
    }

    .macro-label {
        display: block;
        margin-bottom: 0.5rem;
        color: #2c3e50;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .macro-values {
        display: block;
        margin-top: 0.5rem;
        color: #6c757d;
        font-size: 0.85rem;
    }

    .protein-progress {
        --rz-progress-bar-color: #4CAF50;
    }

    .fats-progress {
        --rz-progress-bar-color: #d52f57;
    }

    .carbs-progress {
        --rz-progress-bar-color: #42A5F5;
    }

    .insights-section {
        margin-top: 2rem;
    }

    .insights-grid {
        display: grid;
        gap: 1rem;
    }

    .insight-card {
        background: #f8f9fa;
        border-radius: 1rem;
        padding: 1.25rem;
    }

    .insight-header {
        margin-bottom: 1rem;
    }

    .insight-title {
        font-size: 1rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .meal-distribution-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 0.75rem;
    }

    .meal-name {
        min-width: 80px;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .meal-progress {
        flex: 1;
    }

    .meal-progress-bar {
        --rz-progress-bar-color: #DC7C05;
    }

    .meal-calories {
        min-width: 60px;
        text-align: right;
        color: #6c757d;
        font-size: 0.85rem;
    }

    .meals-section {
        margin-top: 2rem;
    }

    .meals-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .meal-item {
        background: white;
        border-radius: 1rem;
        padding: 1.25rem;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .meal-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .meal-icon {
        font-size: 1.5rem;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 0.75rem;
        min-width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .meal-details {
        flex: 1;
    }

    .meal-name {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.25rem;
    }

    .meal-calories {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .meal-foods {
        margin-top: 1rem;
        background: #f8f9fa;
        border-radius: 0.75rem;
        padding: 0.75rem;
    }

    .food-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .food-item:last-child {
        border-bottom: none;
    }

    .food-name {
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .food-calories {
        color: #6c757d;
        font-size: 0.85rem;
    }

    .material-icons {
        color: #6c757d;
        font-size: 1.25rem;
    }

    @@media (max-width: 768px) {
        .mobile-container {
            padding: 0.75rem;
        }

        .summary-card {
            padding: 1rem;
        }

        .macro-grid {
            gap: 0.5rem;
        }

        .macro-item {
            padding: 0.75rem;
        }

        .meal-item {
            padding: 1rem;
        }

        .meal-icon {
            padding: 0.5rem;
            font-size: 1.25rem;
        }
    }
</style> *@