@page "/dashboard"
@using Radzen.Blazor
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms;
@using FireFitBlazor.Domain.Models
@using FireFitBlazor.Application.Services
@using FireFitBlazor.Domain.ContextInterfaces
@using FireFitBlazor.Domain.ValueObjects
@using FireFitBlazor.Domain.Enums
@inject IFoodLogService FoodLogService
@inject IUserProgressContext UserProgressContext
@inject IBodyMeasurementContext BodyMeasurementContext
@inject WeightPredictionService WeightPredictionService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@using FireFitBlazor.Components
@using Radzen;
@inject DialogService DialogService
@rendermode RenderMode.InteractiveServer

@using BlazorBootstrap
<FireFitBlazor.Components.Layout.TopLogoNav></FireFitBlazor.Components.Layout.TopLogoNav>
<div class="dashboard-container">

    <div class="dashboard-header">
        <h1>Today</h1>
    </div>

    <div class="dashboard-content">
        <div class="calories-summary">


            <div class="calories-circle">
                <div class="circle-wrapper">
                    <svg viewBox="0 0 36 36" class="circular-chart">
                        <path class="circle-bg"
                              d="M18 2.0845
                                 a 15.9155 15.9155 0 0 1 0 31.831
                                 a 15.9155 15.9155 0 0 1 0 -31.831" />
                        <path class="circle"
                              stroke-dasharray="@CalculateProgress, 100"
                              d="M18 2.0845
                                 a 15.9155 15.9155 0 0 1 0 31.831
                                 a 15.9155 15.9155 0 0 1 0 -31.831" />
                    </svg>
                    <div class="circle-text">
                        <h2>@RemainingCalories</h2>
                        <p>remaining</p>
                    </div>
                </div>
            </div>

            <div class="calories-details">
                <div class="calories-item">
                    <span class="label">Goal</span>
                    <span class="value">@totalCaloriesGoal</span>
                </div>
                <div class="calories-item">
                    <span class="label">Food</span>
                    <span class="value">-@caloriesConsumed</span>
                </div>
                <div class="calories-item">
                    <span class="label">Exercise</span>
                    <span class="value">+@exerciseCalories</span>
                </div>
            </div>
        </div>

        <div class="calories-summary">
            <div class="container-fluid overflow-x-auto">
                <LineChart @ref="lineChart" Width="350" />
            </div>
        </div>

        <RadzenButton Text="🔮 Predict Future Weight"
                      Click="@ShowPredictionDialog"
                      ButtonStyle="Radzen.ButtonStyle.Secondary"
                      Style="width: 100%;" />
    </div>
</div>

<RadzenDialog></RadzenDialog>
<RadzenNotification></RadzenNotification>
<FireFitBlazor.Components.Layout.BottomNav></FireFitBlazor.Components.Layout.BottomNav>

@code {
    private int totalCaloriesGoal = 0;
    private int caloriesConsumed = 0;
    private int exerciseCalories = 0;
    private List<WeightLog> measurementWeightLogs = new();
    WeightLog? startingWeightLog = null;
    WeightLog? currentWeightLog = null;

    List<WeightLog> totalWeightLogs = new();

    private int RemainingCalories => totalCaloriesGoal - caloriesConsumed + exerciseCalories;
    private int CalculateProgress => (int)(((double)(totalCaloriesGoal - RemainingCalories) / totalCaloriesGoal) * 100);

    private LineChart? lineChart;
    private LineChartOptions lineChartOptions = default!;
    private LineChartOptions? chartOptions;
    private ChartData chartData = default!;
    private List<FoodLog> todaysFoodLogs = new();
    private List<WeightLog> allWeightLogs = new();
    private User? currentUser;

    private bool _weightCheckDialogShown = false;

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;

    private bool isChartReady = false;
    private bool _initialized = false;

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("ServerAPI");
        var response = await http.GetAsync("/api/customauth/me");

        if (!response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        currentUser = await response.Content.ReadFromJsonAsync<User>();

        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadTodaysCalories();
        await LoadUserWeightProgress();

        var weights = allWeightLogs
           .Select(w => (double)w.Weight)
           .ToList();

        var dates = allWeightLogs
            .Select(w => w.Date.ToString("dd MMM"))
            .ToList();

        await LoadDashboardData();
        StateHasChanged();
    }


    private async Task LoadDashboardData()
    {
        await LoadTodaysCalories();
        await LoadUserWeightProgress();

        var cleanedLogs = allWeightLogs
            .Where(w => w.Weight > 0 && !double.IsNaN((double)w.Weight))
            .GroupBy(w => w.Date)
            .Select(g => g.OrderByDescending(x => x.Date).First())
            .OrderBy(w => w.Date)
            .ToList();

        var weights = cleanedLogs.Select(w => (double)w.Weight).ToList();
        var dates = cleanedLogs.Select(w => w.Date.ToString("dd MMM")).ToList();

        chartData = new ChartData
            {
                Labels = dates,
                Datasets = new List<IChartDataset>
        {
            new LineChartDataset
            {
                Label = "Weight Change",
                Data = weights,
                BorderColor = new List<string> {"rgba(75,192,192,1)" },
                BackgroundColor = new List<string> {"rgba(75,192,192,0.2)" },
                BorderWidth = new List<double> { 2 },
                Fill = false,
                PointRadius = new List<int> { 5 },
                PointHoverRadius = new List<int> { 6 }
            }
        }
            };

        lineChartOptions = new()
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Index }
            };

        lineChartOptions.Scales.X = new()
            {
                Title = new() { Text = "Date", Display = true }
            };

        lineChartOptions.Scales.Y = new()
            {
                Title = new() { Text = "Weight (kg)", Display = true }
            };

        lineChartOptions.Plugins.Title = new()
            {
                Display = true,
                Text = "Weight Change Over Time"
            };
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await lineChart.InitializeAsync(chartData, lineChartOptions);

        var lastWeightLog = allWeightLogs.OrderByDescending(w => w.Date).FirstOrDefault();
        if (lastWeightLog != null && lastWeightLog.Date < DateOnly.FromDateTime(DateTime.Today) && !_weightCheckDialogShown)
        {
            _weightCheckDialogShown = true;
            await ShowWeightCheckDialog();
        }
    }

    private async Task LoadTodaysCalories()
    {
        totalCaloriesGoal = await FoodLogService.GetDailyGoalCalories(currentUser.UserId);

        todaysFoodLogs = await FoodLogService.GetLogsForDate(currentUser.UserId, DateTime.Today);
        caloriesConsumed = todaysFoodLogs.Sum(f => (int)f.NutritionalInfo.Calories);
    }

    private async Task LoadUserWeightProgress()
    {
        var userProgress = await UserProgressContext.GetUserProgressAsync(currentUser.UserId);
        if (userProgress.IsSuccess)
        {
            startingWeightLog = new WeightLog
                {
                    Weight = userProgress.Value.StartingWeight,
                    Date = DateOnly.FromDateTime(userProgress.Value.CreatedAt)
                };

        };

        var measurements = await BodyMeasurementContext.GetByUserIdAsync(currentUser.UserId);

        measurementWeightLogs = measurements
            .Where(m => m.Weight.HasValue)
            .GroupBy(m => m.MeasurementDate.Date)
            .Select(g =>
            {
                var latest = g.OrderByDescending(m => m.MeasurementDate).First();
                return new WeightLog
                    {
                        Weight = latest.Weight!.Value,
                        Date = DateOnly.FromDateTime(latest.MeasurementDate)
                    };
            })
            .ToList();

        if (startingWeightLog != null && !measurementWeightLogs.Any(w => w.Date == startingWeightLog.Date))
        {
            allWeightLogs.Add(startingWeightLog);
        }


        allWeightLogs.AddRange(measurementWeightLogs);

        allWeightLogs = allWeightLogs
        .OrderBy(w => w.Date)
        .ToList();

    }

    private async Task LoadTodaysFoodLogs()
    {
        if (currentUser != null)
        {
            todaysFoodLogs = await FoodLogService.GetLogsForDate(currentUser.UserId, DateTime.Today);
            caloriesConsumed = todaysFoodLogs.Sum(f => (int)f.NutritionalInfo.Calories);
        }
    }

    private async Task ShowPredictionDialog()
    {
        var userData = await WeightPredictionService.GetUserDailyData(currentUser.UserId);
        if (userData.Length < 7)
        {
           NotificationService.Notify(NotificationSeverity.Warning, "Insufficient Data", "You need at least 7 days of tracked data to generate a weight prediction.");
           // await DialogService.Alert("Not enough data", "You need at least 7 days of tracked data to generate a weight prediction.");
            return;
        }

        await DialogService.OpenAsync<WeightPrediction>(
            "28-Day Prediction Weight Change",
            new Dictionary<string, object>
                    {
                { "UserId", currentUser?.UserId }
                    },
            new DialogOptions { Width = "700px", CloseDialogOnOverlayClick = true, ShowClose = true }
        );
    }

    private async Task ShowWeightCheckDialog()
    {
        var result = await DialogService.Confirm(
            "Has your weight changed since yesterday?",
            "Weight Check",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" }
        );
        if (result == true)
        {
            await ShowWeightInputDialog();
        }
        else
        {
            var lastWeightLog = allWeightLogs.OrderByDescending(w => w.Date).FirstOrDefault();
            if (lastWeightLog != null)
            {
                var measurement = BodyMeasurement.Create(
                    userId: currentUser.UserId,
                    weight: lastWeightLog.Weight
                );
                await BodyMeasurementContext.AddMeasurement(measurement);
                await LoadUserWeightProgress();
                await LoadDashboardData();
            }
        }
    }

    private async Task ShowWeightInputDialog()
    {
        var result = await DialogService.OpenAsync<WeightInputDialog>(
            "New Weight",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "400px", CloseDialogOnOverlayClick = true }
        );

        if (result is decimal inputWeight && inputWeight > 0)
        {
            var measurement = BodyMeasurement.Create(
                userId: currentUser.UserId,
                weight: inputWeight
            );
            await BodyMeasurementContext.AddMeasurement(measurement);
            await LoadUserWeightProgress();
            await LoadDashboardData();
        }
    }

    public class WeightLog
    {
        public decimal Weight { get; set; }
        public DateOnly Date { get; set; }
    }
}
<style>
    .dashboard-container {
        max-width: 600px;
        margin: auto;
        padding: 1rem;
    }

    .dashboard-header h1 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
    }

    .dashboard-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .calories-summary {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        padding: 1rem;
        gap: 1rem;
    }

    .calories-circle {
        width: 120px;
        height: 120px;
        position: relative;
        flex-shrink: 0;
        margin: auto;
    }

    .circle-wrapper {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .circular-chart {
        width: 100%;
        height: 100%;
        transform: rotate(-90deg);
    }

    .circle-bg {
        fill: none;
        stroke: #eee;
        stroke-width: 3.8;
    }

    .circle {
        fill: none;
        stroke: #DC7C05;
        stroke-width: 3.8;
        stroke-linecap: round;
        transition: stroke-dasharray 0.5s ease;
    }

    .circle-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }

        .circle-text h2 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .circle-text p {
            margin: 0;
            font-size: 0.85rem;
            color: #6c757d;
        }

    .calories-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .calories-item {
        display: flex;
        justify-content: space-between;
    }

        .calories-item .label {
            font-size: 0.9rem;
            color: #6c757d;
        }

        .calories-item .value {
            font-weight: 600;
            color: #2c3e50;
        }

    .insights-section {
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        padding: 1rem;
    }

        .insights-section h3 {
            font-size: 1.1rem;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

    .weight-chart {
        background: #f8f9fa;
        border-radius: 0.75rem;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #6c757d;
    }

    @@media (max-width: 600px) {
        .calories-summary {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .calories-details {
            align-items: center;
            width: 100%;
        }

        .calories-item {
            width: 100%;
            justify-content: space-between;
            max-width: 300px;
        }
    }

    .weight-check-dialog,
    .weight-input-dialog {
        padding: 1rem;
        text-align: center;
    }

    .dialog-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
    }
</style>
