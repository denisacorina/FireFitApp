@page "/my-profile"
@using FireFitBlazor.Application.Services
@using FireFitBlazor.Components.Layout
@using FireFitBlazor.Domain.ContextInterfaces
@using FireFitBlazor.Domain.ContextInterfaces.ProgressContexts
@using FireFitBlazor.Domain.Models
@using FireFitBlazor.Domain.Enums
@using static FireFitBlazor.Domain.Enums.FoodTrackingEnums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IUserProgressContext UserProgressContext
@inject IPhotoUploadService PhotoUploadService
@inject IUserPreferencesContext UserPreferencesContext
@inject IGetUserContext GetUserContext
@inject IFoodLogService FoodLogService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using FireFitBlazor.Domain.Interfaces
@using Microsoft.AspNetCore.Identity
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims;
@inject ICurrentUserService CurrentUserService
@inject IUpdateUserContext UpdateUserContext
@inject IUpdateUserProgressContext UpdateUserProgressContext
@using Microsoft.AspNetCore.Components.Web
@using FireFitBlazor.MachineLearning
@rendermode RenderMode.InteractiveServer
@inject IWeightPredictionService PredictionService

<div class="profile-container">
    @if (currentUser == null)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Basic Info">
                    <div class="profile-section">
                        <div class="profile-header">
                            <div class="profile-picture">
                                @if (!string.IsNullOrEmpty(currentUser.ProfilePicturePath))
                                {
                                    <RadzenImage Path="@currentUser.ProfilePicturePath" Style="width: 150px; height: 150px; border-radius: 50%;" />
                                }
                                else
                                {
                                    <RadzenIcon Icon="account_circle" Style="width: 150px; height: 150px;" />
                                }
                                <InputFile OnChange="OnProfilePhotoSelected" accept="image/*" class="mt-2" />
                            </div>
                            <div class="profile-info">
                                <RadzenTextBox @bind-Value="name" Placeholder="Name" Class="w-100 mb-2" />
                                <RadzenNumeric @bind-Value="age" Placeholder="Age" Class="w-100 mb-2" />
                                <RadzenNumeric @bind-Value="height" Placeholder="Height (cm)" Class="w-100 mb-2" />

                                <RadzenDropDown Data="@WeightGoalOptions"
                                @bind-Value="currentUser.WeightGoal.ChangeType"
                                TValue="WeightChangeType"
                                TextProperty="Text"
                                ValueProperty="Value"
                                Class="w-100 mb-2" />

                                <RadzenNumeric @bind-Value="currentUser.WeightGoal.TargetWeight" Placeholder="Target Weight (kg)" Class="w-100 mb-2" />

                                <RadzenDropDown Data="@ActivityLevels"
                                @bind-Value="activityLevel"
                                TValue="ActivityLevel"
                                TextProperty="Text"
                                ValueProperty="Value"
                                Class="w-100 mb-2" />

                                <!-- Dietary Preferences -->
                                <RadzenCheckBoxList @bind-Value="selectedDietaryPreferences"
                                Data="@(Enum.GetValues<DietaryPreference>()
                        .Cast<DietaryPreference>()
                        .Select(d => new KeyValuePair<string, DietaryPreference>(d.ToString(), d)))"
                                TValue="DietaryPreference"
                                TextProperty="Key"
                                ValueProperty="Value"
                                Name="DietaryPreferences"
                                Style="width: 100%" />

                                <!-- Workout Preferences -->
                                <RadzenCheckBoxList @bind-Value="selectedWorkoutTypes"
                                Data="@(Enum.GetValues<WorkoutType>()
                        .Cast<WorkoutType>()
                    .Select(d => new KeyValuePair<string, WorkoutType>(d.ToString(), d)))"
                                TValue="WorkoutType"
                                TextProperty="Key"
                                ValueProperty="Value"
                                Name="WorkoutTypes"
                                Style="width: 100%" />
                            </div>
                        </div>
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Today's Progress">
                    <div class="profile-section">
                        <div class="measurements">
                            <h4>Today's Food Log</h4>
                            <div class="meal-sections">
                                @foreach (var mealType in Enum.GetValues<MealType>())
                                {
                                    <div class="meal-section">
                                        <h5>@mealType</h5>
                                        <RadzenDataGrid Data="@GetMealsForType(mealType)"
                                        TItem="FoodLog"
                                        AllowPaging="true"
                                        PageSize="5">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="FoodLog" Property="FoodName" Title="Food" />
                                                <RadzenDataGridColumn TItem="FoodLog" Property="Calories" Title="Calories" />
                                                <RadzenDataGridColumn TItem="FoodLog" Property="Proteins" Title="Protein" />
                                                <RadzenDataGridColumn TItem="FoodLog" Property="Carbs" Title="Carbs" />
                                                <RadzenDataGridColumn TItem="FoodLog" Property="Fats" Title="Fats" />
                                            </Columns>
                                        </RadzenDataGrid>
                                        <RadzenButton Text="Add Food" Click="@(() => NavigateToAddFood(mealType))"
                                        ButtonStyle="ButtonStyle.Primary" Class="mt-2" />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

        <div class="profile-actions">
            <RadzenButton Text="Save Changes" Click="@SaveChanges"
            ButtonStyle="ButtonStyle.Primary" Class="w-100 mb-2" />
        </div>

        <RadzenButton Text="Add Measurement" Click="@OpenMeasurementDialog" ButtonStyle="ButtonStyle.Primary" />
        <RadzenButton Text="Add Measurement" Click="@Predict" ButtonStyle="ButtonStyle.Primary" />
        <RadzenDialog />
    }

    <RadzenButton Text="Generate Prediction"
    Click="GeneratePrediction"
    ButtonStyle="ButtonStyle.Primary"
    class="mt-3" />
</div>
<RadzenNotification />
<BottomNav />
<style>
    .profile-container {
    padding: 1rem;
    max-width: 800px;
    margin: 0 auto;
    }

    .profile-section {
    padding: 1rem;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1rem;
    }

    .profile-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
    }

    .profile-picture {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    }

    .profile-info {
    width: 100%;
    max-width: 400px;
    }

    .meal-sections {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    }

    .meal-section {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    }

    .meal-section h5 {
    margin-bottom: 1rem;
    color: #333;
    }

    /* Mobile Responsive Styles */
    @@media (max-width: 768px) {
    .profile-container {
    padding: 0.5rem;
    }

    .profile-section {
    padding: 0.5rem;
    }
    }

    @@media (min-width: 768px) {
    .profile-header {
    flex-direction: row;
    justify-content: space-around;
    }
    }
</style>

@code {
    [Inject]
    public HttpClient Http { get; set; } = default!;
    private string? currentUserId;
    private User? currentUser;
    private UserProgress? userProgress;
    private IEnumerable<DietaryPreference> selectedDietaryPreferences = new List<DietaryPreference>();
    private IEnumerable<WorkoutType> selectedWorkoutTypes = new List<WorkoutType>();
    private IEnumerable<Gender> Genders => Enum.GetValues<Gender>();
    private IEnumerable<WeightChangeType> WeightGoals => Enum.GetValues<WeightChangeType>();
    private List<FoodLog> todayFoodLogs = new();

    private string name = "";
    private int age;
    private int height;
    private decimal targetWeight;
    private decimal currentWeight;
    private WeightChangeType changeType;
    private ActivityLevel activityLevel;
    private string? profilePicturePath;
    private ExperienceLevel fitnessExperience;
    private PredictUserProgress PredictUserProgress = new PredictUserProgress();

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;

    private IEnumerable<DietaryPreference> DietaryPreferences;
    private List<WorkoutPreference> WorkoutPreferences;
    private IEnumerable<WorkoutType> WorkoutTypes;

    private IEnumerable<object> ActivityLevels => Enum
    .GetValues<ActivityLevel>()
    .Cast<ActivityLevel>()
    .Select(w => new { Text = w.ToString(), Value = w });

    private IEnumerable<object> WeightGoalOptions => Enum
    .GetValues<WeightChangeType>()
    .Cast<WeightChangeType>()
    .Select(w => new { Text = w.ToString(), Value = w });
    private IEnumerable<object> ExperienceLevels => Enum
       .GetValues<ExperienceLevel>()
       .Cast<ExperienceLevel>()
       .Select(w => new { Text = w.ToString(), Value = w });

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("ServerAPI");
        var response = await http.GetAsync("/api/customauth/me");
        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        currentUser = await response.Content.ReadFromJsonAsync<User>();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Load user and their progress
        name = currentUser.Name;
        age = currentUser.Age;
        height = currentUser.Height;
        targetWeight = currentUser.WeightGoal.TargetWeight;
        changeType = currentUser.WeightGoal.ChangeType;
        activityLevel = currentUser.ActivityLevel;
        profilePicturePath = currentUser.ProfilePicturePath;
        fitnessExperience = currentUser.FitnessExperience;
        selectedDietaryPreferences = currentUser.DietaryPreferences.ToList();
        selectedWorkoutTypes = currentUser.WorkoutTypes.ToList();
        currentUserId = currentUser.UserId;
        // Load user progress
        var result = await UserProgressContext.GetUserProgressAsync(currentUser.UserId);

        if (result.IsSuccess && result.Value != null)
        {
            userProgress = result.Value;
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Could not load user progress.");
            userProgress = null; 
        }

        if (userProgress == null)
        {
            userProgress = UserProgress.Create(
                currentUser.UserId,
                currentUser.StartingWeight,
                currentUser.WeightGoal.TargetWeight
            );
        }

        // Load preferences
        selectedDietaryPreferences = currentUser.DietaryPreferences;

        // Load today's food logs
        todayFoodLogs = await FoodLogService.GetLogsForDate(currentUser.UserId, DateTime.Today);

        // if (userProgress == null)
        // {
        //     userProgress = UserProgress.Create(
        //         currentUser.UserId,
        //         CurrentWeight,
        //         CurrentWeight
        //     );
        // }
    }

    private IEnumerable<FoodLog> GetMealsForType(MealType mealType)
    {
        return todayFoodLogs.Where(f => f.MealType == mealType);
    }

    private void NavigateToAddFood(MealType mealType)
    {
        NavigationManager.NavigateTo($"/meal-detect-demo?mealType={mealType}");
    }

    private async Task OnProfilePhotoSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var photoPath = await PhotoUploadService.UploadFileAsync(currentUser.UserId, file);
                profilePicturePath = photoPath;
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(
                NotificationSeverity.Error,
                "Error",
                "Failed to upload profile photo."
            );
        }
    }

    private async Task OnWorkoutPreferencesChange(IEnumerable<WorkoutType> values)
    {
        selectedWorkoutTypes = values.ToList();
        var workoutPreferences = selectedWorkoutTypes.Select(type =>
            WorkoutPreference.Create(currentUser.UserId, type, DayOfWeek.Monday, TimeSpan.FromHours(9), 60, 5)
        ).ToList();

        WorkoutPreferences = workoutPreferences;
        await UserPreferencesContext.UpdateWorkoutPreferencesAsync(currentUser.UserId, workoutPreferences);
        NotificationService.Notify(NotificationSeverity.Success, "Success", "Workout preferences updated!");
    }

    private async Task<Result<UserProgress?>> SaveChanges()
    {
        try
        {
            isLoading = true;

            // 1. Extract updated workout preferences from selectedWorkoutTypes
            var updatedWorkoutPreferences = selectedWorkoutTypes
                .Select(type => WorkoutPreference.Create(
                    currentUser.UserId,
                    type,
                    DayOfWeek.Monday,
                    TimeSpan.FromHours(9),
                    60, // duration
                    5   // intensity or user level
                )).ToList();


            var updateUserResult = await UpdateUserContext.Execute(currentUser.UserId,
              currentUser.Email,
              currentUser.Name,
             currentUser.Age,
              currentUser.Gender == Gender.Male,
            currentUser.Height,
             userProgress.StartingWeight,
            currentUser.WeightGoal.TargetWeight,
        currentUser.WeightGoal.ChangeType,
         currentUser.ActivityLevel,
               selectedDietaryPreferences.ToList(),
               selectedWorkoutTypes.ToList(),
            profilePicturePath,
             currentUser.FitnessExperience);
            if (!updateUserResult)
            {
                return Result<UserProgress?>.Failure("Failed to update user profile.");
            }

            var workoutPrefResult = await UserPreferencesContext.UpdateWorkoutPreferencesAsync(
                currentUser.UserId, updatedWorkoutPreferences);
            if (!workoutPrefResult)
            {
                return Result<UserProgress?>.Failure("Failed to update workout preferences.");
            }

            var dietaryPrefResult = await UserPreferencesContext.UpdateDietaryPreferencesAsync(
                currentUser.UserId, selectedDietaryPreferences);
            if (!dietaryPrefResult)
            {
                return Result<UserProgress?>.Failure("Failed to update dietary preferences.");
            }

            var updateProgressResult = await UpdateUserProgressContext.UpdateUserProgressAsync(userProgress);
            if (!updateProgressResult.IsSuccess)
            {
                return Result<UserProgress?>.Failure("Failed to update user progress.");
            }

            NotificationService.Notify(NotificationSeverity.Success, "Success", "Profile updated successfully!");
            return Result<UserProgress?>.Success(updateProgressResult.Value);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update profile.");
            return Result<UserProgress?>.Failure($"An error occurred while saving changes: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            await OnInitializedAsync();
        }
    }

    // Helper method to show loading state
    private void ShowLoading(string message = "Loading...")
    {
        isLoading = true;
        StateHasChanged();
    }

    // Helper method to hide loading state
    private void HideLoading()
    {
        isLoading = false;
        StateHasChanged();
    }

    private async Task OpenMeasurementDialog()
    {
        var parameters = new Dictionary<string, object>
    {
        { "UserId", currentUser.UserId } // Pass the UserId to the dialog
    };

        // Open the dialog
        var result = await DialogService.OpenAsync<MeasurementDialog>(
            "Add Measurement",
            parameters: parameters,
            options: new DialogOptions() { Width = "400px", Height = "600px" }
        );

        if (result != null && result is BodyMeasurement measurement)
        {
            Console.WriteLine($"New measurement created for user");
        }
    } 

    private async Task Predict()
    {
        //PredictUserProgress.PredictUserProgressNow();
        PredictUserProgress.PredictWeightForNextWeek();
    }
    private WeightPredictionWithAnalysis? prediction;

    private async Task GeneratePrediction()
    {
        prediction = await PredictionService.PredictWeight28Days(currentUserId);
    }

}